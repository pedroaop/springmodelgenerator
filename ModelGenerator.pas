unit ModelGenerator;

interface

uses
   SysUtils,
   Spring.Persistence.Mapping.CodeGenerator.Abstract,
   Spring.Persistence.Mapping.CodeGenerator,
   System.RegularExpressions;

type
   TModelGenerator = class(TDelphiUnitCodeGenerator)
   private
      FTableName: string;
      FUnitBuilder: TStringBuilder;
   public
      constructor Create;
      destructor Destroy; override;
      function AddUnit(const unitName: string): TStringBuilder; override;
      function AddClassAttribute(const attributeText: string)
        : TStringBuilder; override;
      function AddEntityDeclaration(const entityData: TEntityModelData)
        : TStringBuilder; override;
      function AddPrivateField(const columnData: TColumnData)
        : TStringBuilder; override;
      function AddPublicProperty(const columnData: TColumnData)
        : TStringBuilder; override;
      function AddGettersAndSetters(const columnData: TColumnData)
        : TStringBuilder;
      function AddTypeAttribute(const attributeText: string)
        : TStringBuilder; override;
      function GenerateInterface(const entityData: TEntityModelData): string;
      function GenerateModel(const entityData: TEntityModelData): string;
      function GetColumnCamelCase(const columnData: TColumnData): string;
   end;

implementation

const
   UNIT_ATTRIBUTES = 'Spring.Persistence.Mapping.Attributes';
   UNIT_GRAPHICS = 'Spring.Persistence.Core.Graphics';
   UNIT_NULLABLES = 'Spring';

function TModelGenerator.AddClassAttribute(const attributeText: string)
  : TStringBuilder;
begin
   Result := FUnitBuilder.AppendLine.Append(Indent).Append(Indent)
     .Append(attributeText);
end;

function TModelGenerator.AddEntityDeclaration(const entityData
  : TEntityModelData): TStringBuilder;
begin
   // add attribute
   AddTypeAttribute('[Entity]');
   AddTypeAttribute(Format('[Table(%0:s, %1:s)]',
     [QuotedStr(entityData.TableName), QuotedStr(entityData.SchemaName)]));

   FUnitBuilder.AppendLine.Append(Indent);

   Result := FUnitBuilder.Append(EntityTypePrefix).Append(entityData.TableName)
     .Append(' = class');
end;

function TModelGenerator.AddGettersAndSetters(const columnData: TColumnData)
  : TStringBuilder;
var
   ColumnName: string;
begin
   ColumnName := GetColumnCamelCase(columnData);
   Result := FUnitBuilder.AppendLine.Append(Indent).Append(Indent)
     .Append('function Get').Append(ColumnName).Append(': ')
     .Append(GetColumnTypeName(columnData)).Append(';')
     .AppendLine.Append(Indent).Append(Indent).Append('procedure Set')
     .Append(ColumnName).Append('(const Value: ')
     .Append(GetColumnTypeName(columnData)).Append(');');

end;

function TModelGenerator.AddPrivateField(const columnData: TColumnData)
  : TStringBuilder;
begin
   if columnData.IsAutogenerated then
      AddClassAttribute('[AutoGenerated]');

   AddClassAttribute(GetColumnAttributeText(columnData));

   Result := FUnitBuilder.AppendLine.Append(Indent).Append(Indent)
     .Append(GetPrivateFieldName(columnData)).Append(': ')
     .Append(GetColumnTypeName(columnData)).Append(';');
end;

function TModelGenerator.AddPublicProperty(const columnData: TColumnData)
  : TStringBuilder;
var
   ColumnName: string;
begin
   ColumnName := GetColumnCamelCase(columnData);
   Result := FUnitBuilder.AppendLine.Append(Indent).Append(Indent)
     .Append('property ').Append(ColumnName).Append(': ')
     .Append(GetColumnTypeName(columnData)).Append(' read Get')
     .Append(ColumnName).Append(' write Set').Append(ColumnName).Append(';');
end;

function TModelGenerator.AddTypeAttribute(const attributeText: string)
  : TStringBuilder;
begin
   Result := FUnitBuilder.AppendLine.Append(Indent).Append(attributeText);
end;

function TModelGenerator.AddUnit(const unitName: string): TStringBuilder;
begin
   Result := FUnitBuilder.Append(',').AppendLine.Append(Indent)
     .Append(unitName);
end;

constructor TModelGenerator.Create;
begin
   inherited Create;
   FUnitBuilder := TStringBuilder.Create;
end;

destructor TModelGenerator.Destroy;
begin
   FUnitBuilder.Free;
   inherited Destroy;
end;

{ TModelGenerator }

function TModelGenerator.GenerateInterface(const entityData
  : TEntityModelData): string;
var
   columnData: TColumnData;
begin

   FTableName := entityData.TableName;

   FUnitBuilder.Clear;

   FUnitBuilder.AppendFormat('unit %s;', [GetUnitName(entityData)])
     .AppendLine.AppendLine;

   FUnitBuilder.Append('interface').AppendLine.AppendLine;

   FUnitBuilder.Append('uses').AppendLine.Append(Indent)
     .Append(UNIT_ATTRIBUTES);
   AddUnit(UNIT_GRAPHICS);
   if UseNullableTypes then
      AddUnit(UNIT_NULLABLES);
   FUnitBuilder.Append(';');

   FUnitBuilder.AppendLine.AppendLine.Append('type').AppendLine.Append(Indent)
     .Append('I').Append(entityData.TableName).Append(' = interface');

   FUnitBuilder.AppendLine.Append(Indent).Append('public');
   for columnData in entityData.Columns do
      AddGettersAndSetters(columnData);

   FUnitBuilder.AppendLine;

   for columnData in entityData.Columns do
      AddPublicProperty(columnData);

   FUnitBuilder.AppendLine.Append(Indent).Append('end').Append(';');

   FUnitBuilder.AppendLine.AppendLine.Append('implementation').AppendLine;

   FUnitBuilder.Append('end').Append('.');

   Result := FUnitBuilder.ToString;
end;

function TModelGenerator.GenerateModel(const entityData
  : TEntityModelData): string;
var
   columnData: TColumnData;
begin

   FTableName := entityData.TableName;

   FUnitBuilder.Clear;

   FUnitBuilder.AppendFormat('unit %s;', [GetUnitName(entityData)])
     .AppendLine.AppendLine;

   FUnitBuilder.Append('interface').AppendLine.AppendLine;
   FUnitBuilder.AppendLine.AppendLine.Append('implementation').AppendLine;

   FUnitBuilder.Append('uses').AppendLine.Append(Indent)
     .Append(UNIT_ATTRIBUTES);
   AddUnit(UNIT_GRAPHICS);
   if UseNullableTypes then
      AddUnit(UNIT_NULLABLES);
   FUnitBuilder.Append(';');

   FUnitBuilder.AppendLine.AppendLine;

   FUnitBuilder.Append('type');

   AddEntityDeclaration(entityData);

   FUnitBuilder.AppendLine.Append(Indent).Append('private');
   for columnData in entityData.Columns do
      AddPrivateField(columnData);

   FUnitBuilder.AppendLine.Append(Indent).Append('public');
   for columnData in entityData.Columns do
      AddPublicProperty(columnData);

   FUnitBuilder.AppendLine.Append(Indent).Append('end').Append(';');

   FUnitBuilder.AppendLine.AppendLine.Append('end').Append('.');

   Result := FUnitBuilder.ToString;

end;

function TModelGenerator.GetColumnCamelCase(const columnData
  : TColumnData): string;
var
   Input: string;
   Pattern: string;
   Splits: TArray<string>;
   Split: string;
begin
   Input := TRegEx.Replace(columnData.ColumnName, FTableName, EmptyStr);
   Input := TRegEx.Replace(Input, Copy(FTableName, 1, Length(FTableName) - 1),
     EmptyStr);
   Pattern := '_';
   Result := EmptyStr;
   Splits := TRegEx.Split(Input, Pattern);
   for Split in Splits do
   begin

      Result := Result + UpperCase(Copy(Split, 1, 1)) +
        LowerCase(Copy(Split, 2, Length(Split)))
   end;

end;

end.
